#!/usr/bin/env node


/**
 * Module dependencies.
 */

 var app          = require('../app')
 ,  debug       = require('debug')('security-arduino:server')
 ,   fs         = require('fs')
 ,   https      = require('https')
 ,   spdy       = require('spdy');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '443');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var options = {
  key: fs.readFileSync('ssl.key'),
  cert: fs.readFileSync('ssl.crt'),
  ca: fs.readFileSync('ssl.pem'),

  // **optional** SPDY-specific options
  spdy: {
    protocols: ['spdy/3.1'],
    plain: false,

    // **optional**
    // Parse first incoming X_FORWARDED_FOR frame and put it to the
    // headers of every request.
    // NOTE: Use with care! This should not be used without some proxy that
    // will *always* send X_FORWARDED_FOR
    'x-forwarded-for': true,

    connection: {
      windowSize: 1024 * 1024, // Server's window size

      // **optional** if true - server will send 3.1 frames on 3.0 *plain* spdy
      autoSpdy31: true
    }
  }
};

var server = spdy.createServer(https.Server, options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Serial.port
var serialPort  = require("serialport")
, SerialPort      = serialPort.SerialPort
, sp  
, portaSerial     = ''
, interval

var io = require('socket.io')(server)
, socket  = require('socket.io');

io.on("connection", function(socket){
  console.log('Usuario conectado');

  socket.on('disconnect', function () {
    console.log("desconectado!")
  });
  

  var config ={
    listarPorta: function(){
      if(portaSerial.length != 0){
      }else{
        serialPort.list(function (err, ports) {
          for (var i = 0; i < ports.length; i++) {
            if(ports[i].pnpId === undefined){

            }else{
              portaSerial = ports[i].comName;
              config.conectar();
              config.stop();

            }
          }
        });     
      }
    },
    buscaPorta: function(){
      interval = setInterval(function(){ config.listarPorta() }, 1000);
    },
    stop: function(){
      clearInterval(interval);
    },
    conectar: function(){
      if(portaSerial.length != 0){
        sp = new SerialPort(portaSerial, {
          parser: serialPort.parsers.readline('\n'),
          baudrate: 9600,
          dataBits: 8,
          stopBits: 2,
          flowControl: false
        });
        sp.on('open', function(){
          console.log('Arduino: Conectado!');
          socket.emit('Arduino',{msg: true});
          socket.on('ligar',function(){
            console.log('ligar');
            sp.write('A');
          });
          socket.on('desligar',function(){
            console.log('desligar');
            sp.write('B');
          });

        })
        sp.on('data', function(data){
          console.log(data);
        });

        sp.on('error', function(e){
          console.log('Error na conexão com Arduino');
          socket.emit('Arduino', {msg: false});

        });
        sp.on('close', function(a){
          socket.emit('Arduino', {msg: false});
          console.log('Conexão Fechada com Arduino');
          portaSerial = '';
          sp = null;
          config.buscaPorta();
        });
      }
    }
  };
  config.buscaPorta();
});

module.exports = server;